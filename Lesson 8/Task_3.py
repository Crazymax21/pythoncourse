# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на
# наличие только чисел. Проверить работу исключения на реальном примере. Запрашивать у
# пользователя данные и заполнять список необходимо только числами. Класс-исключение
# должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока
# пользователь сам не остановит работу скрипта, введя, например, команду «stop». При этом
# скрипт завершается, сформированный список с числами выводится на экран.
# Подсказка: для этого задания примем, что пользователь может вводить только числа и строки.
# Во время ввода пользователем очередного элемента необходимо реализовать проверку типа
# элемента. Вносить его в список, только если введено число. Класс-исключение должен не
# позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение.
# При этом работа скрипта не должна завершаться.

class ValidString(Exception):

    def __init__(self, txt):
        self.txt = txt

    def __str__(self):
        return self.txt

user_list = []

while True:
    user_string = input('Введите число: ')
    if user_string == '':
        print('Ввод окончен')
        break
    try:
        if not user_string.replace('.', '').isdigit():
            raise ValidString('Вы ввели не число')
        user_list.append(int(user_string) if '.' not in user_string else float(user_string))
    except ValidString as err:
        print(err)

print(user_list)

